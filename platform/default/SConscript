import os.path

Import('env opts')

opts.Add('bison', 'Point to the bison executable', '/usr/bin/bison')
opts.Add('flex', 'Point to the flex executable', '/usr/bin/flex')
opts.Update(env)

env.AppendUnique(CCFLAGS=['-g', '-O2'])
env.AppendUnique(CPPPATH = [env.Dir('#/aqsistypes/posix')])
env.AppendUnique(CPPDEFINES=[('NDEBUG', '1'), ('PLUGINS', '1')])

# Point at the boost headers.
# todo: need to find a way of determining this location automatically
env.Replace(boost_include_path = ['/usr/include/boost'])

# Find out where the TIFF headers are, look in common places.
tiffiofile = env.FindFile('tiffio.h', ['$tiff_include_path', '/usr/include'])
if tiffiofile != None:
	env.Replace(tiff_include_path = os.path.dirname(tiffiofile.abspath))

# Find out where the TIFF libraries are, look in common places for Fink and DarwinPorts.
tifflibfile = env.FindFile('libtiff.a', ['$tiff_lib_path', '/usr/lib'])
if tifflibfile != None:
	env.Replace(tiff_lib_path = os.path.dirname(tifflibfile.abspath))
env.Replace(tiff_lib = 'tiff')

# Find out where the JPEG headers are, look in common places for Fink and DarwinPorts.
jpegiofile = env.FindFile('jpeglib.h', ['$jpeg_include_path', '/usr/include', '/usr/include'])
if jpegiofile != None:
	env.Replace(jpeg_include_path = os.path.dirname(jpegiofile.abspath))

# Find out where the JPEG libraries are, look in common places for Fink and DarwinPorts.
jpeglibfile = env.FindFile('libjpeg.a', ['$jpeg_lib_path', '/usr/lib', '/usr/lib'])
if jpeglibfile != None:
	env.Replace(jpeg_lib_path = os.path.dirname(jpeglibfile.abspath))
env.Replace(jpeg_lib = 'jpeg')

# Find out where the zlib headers are, look in common places for Fink and DarwinPorts.
zlibiofile = env.FindFile('zlib.h', ['$zlib_include_path', '/usr/include', '/usr/include'])
if zlibiofile != None:
	env.Replace(zlib_include_path = os.path.dirname(zlibiofile.abspath))

# Find out where the zlib libraries are, look in common places for Fink and DarwinPorts.
zliblibfile = env.FindFile('libz.a', ['$zlib_lib_path', '/usr/lib', '/usr/lib'])
if zliblibfile != None:
	env.Replace(zlib_lib_path = os.path.dirname(zliblibfile.abspath))
env.Replace(z_lib = 'z')

# Find out where the fltk headers are, look in common places for Fink and DarwinPorts.
fltkfile = env.FindFile('FL/fl.h', ['$fltk_include_path', '/usr/include'])
if fltkfile != None:
	env.Replace(fltk_include_path = os.path.split(os.path.dirname(fltkfile.abspath))[0])

# Find out where the fltk libraries are, look in common places for Fink and DarwinPorts.
fltklibfile = env.FindFile('libfltk.a', ['$fltk_lib_path', '/usr/lib'])
if fltklibfile != None:
	env.Replace(fltk_lib_path = os.path.dirname(fltklibfile.abspath))
env.Replace(fltk_lib = 'fltk')


# Setup the xsltproc program location
env.Replace(XSLTPROC = 'xsltproc')

env.Replace(YACC = '${bison}')
env.Replace(LEX = '${flex}')
env.Replace(YACCFLAGS = '--no-lines -d')

display_libs = ['tiff', 'z']

# These are place holders at the moment, we need to work out the proper defines?
env.AppendUnique(CPPDEFINES=[('DEFAULT_RC_PATH', '\\"' + env.Dir('$install_prefix').abspath + os.sep + 'etc' + '\\"')])
env.AppendUnique(CPPDEFINES=[('DEFAULT_SHADER_PATH', '\\"' + env.Dir('$install_prefix').abspath + os.sep + 'shaders' + '\\"')])

# System configuration location
env.Replace(SYSCONFDIR = env.Dir('$install_prefix').abspath + os.sep + 'etc')

env.Replace(slparse_ccflags = ['-O0'])
env.Replace(aqsis_libs = ['dl'])
env.Replace(aqsltell_libs = ['dl'])
env.Replace(teqser_libs = ['dl'])

