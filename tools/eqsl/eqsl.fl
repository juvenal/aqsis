# data file for the Fltk User Interface Designer (fluid)
version 1.0108 
header_name {.h} 
code_name {.cxx}
comment {// Aqsis
// Copyright (C) 1997 - 2008, Paul C. Gregory
//
// Contact: pgregory@aqsis.org
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

// \\file
//
// \\brief Central graphical interface allowing easy/fast access to commonly-used Aqsis tools
//
// \\author Leon Tony Atkinson [ latkinson (at) aqsis (dot) org ]
//} {in_source in_header
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public
} 

decl {\#include <cstdlib>} {public
} 

decl {\#include <string>} {public
} 

decl {using std::string;} {public
} 

decl {string chooserTitleOpen = "Select File";} {} 

decl {string commandLine = "";} {} 

decl {string currentDirectory = ".";} {} 

decl {string renderEngine = "aqsis";} {} 

decl {string renderEngineArg = "-progress";} {} 

decl {string renderEngineFile = "";} {} 

decl {string renderEngineType = "RenderMan Geometry Files (*.{rib,ribz,rib.gz})";} {} 

decl {string renderViewer = "piqsl";} {} 

decl {string shaderCompiler = "aqsl";} {} 

decl {string shaderCompilerFile = "";} {} 

decl {string shaderCompilerType = "RenderMan Shader Files (*.sl)";} {} 

decl {string toolsHistoryTitle = "Command History:";} {} 

Function {} {open
} {
  Fl_Window m_window {
    label eqsl open
    xywh {-32000 -32000 400 300} type Double hide
  } {
    Fl_Menu_Bar {} {open
      xywh {0 0 400 25}
      code0 {\#include <FL/Fl_Sys_Menu_Bar.H>}
      class Fl_Sys_Menu_Bar
    } {
      Submenu m_menuFile {
        label {&File} open
        xywh {0 0 100 20}
      } {
        MenuItem m_menuFileQuit {
          label {&Quit}
          callback {exit(0);}
          xywh {0 0 100 20}
          code0 {o->shortcut(FL_COMMAND+'q');}
        }
      }
      Submenu m_menuTools {
        label {&Tools} open
        xywh {0 0 100 20}
      } {
        MenuItem m_menuToolsRender {
          label {&Render File}
          callback {// Open and process FLTK 'File Selection' dialog
Fl_File_Chooser fl_file_chooser(renderEngineFile.c_str(), renderEngineType.c_str(), Fl_File_Chooser::SINGLE, chooserTitleOpen.c_str());
fl_file_chooser.show();

while(fl_file_chooser.shown())
	{
	Fl::wait();
	}

if (fl_file_chooser.value() == NULL)
	{
	return;
	}
else
	{
	currentDirectory = fl_file_chooser.directory();
	renderEngineFile = fl_file_chooser.value();
	}

// Call relevant commandline
commandLine = "cd \\"" + currentDirectory + "\\"; " + renderEngine + " " + renderEngineArg + " \\"" + renderEngineFile + "\\"";
system(commandLine.c_str());

// Log commandline event
m_outputConsole->add(commandLine.c_str());}
          xywh {0 0 100 20}
          code0 {o->shortcut(FL_COMMAND+'R');}
        }
        MenuItem m_menuToolsCompile {
          label {&Compile Shader}
          callback {// Open and process FLTK 'File Selection' dialog
Fl_File_Chooser fl_file_chooser(shaderCompilerFile.c_str(), shaderCompilerType.c_str(), Fl_File_Chooser::SINGLE, chooserTitleOpen.c_str());
fl_file_chooser.show();

while(fl_file_chooser.shown())
	{
	Fl::wait();
	}

if (fl_file_chooser.value() == NULL)
	{
	return;
	}
else
	{
	currentDirectory = fl_file_chooser.directory();
	shaderCompilerFile = fl_file_chooser.value();
	}

// Call relevant commandline
commandLine = "cd \\"" + currentDirectory + "\\"; " + shaderCompiler + " \\"" + shaderCompilerFile + "\\"";
system(commandLine.c_str());

// Log commandline event
m_outputConsole->add(commandLine.c_str());}
          xywh {0 0 100 20}
          code0 {o->shortcut(FL_COMMAND+'C');}
        }
        MenuItem m_menuToolsFramebuffer {
          label {Open &Framebuffer}
          callback {// Call relevant commandline
commandLine = renderViewer;
system(commandLine.c_str());

// Log commandline event
m_outputConsole->add(commandLine.c_str());}
          xywh {0 0 100 20} divider
          code0 {o->shortcut(FL_COMMAND+'F');}
        }
        MenuItem m_menuToolsClean {
          label {Clear &History}
          callback {m_outputConsole->clear();
m_outputConsole->add(toolsHistoryTitle.c_str());} selected
          xywh {0 0 100 20}
          code0 {o->shortcut(FL_COMMAND+'h');}
        }
      }
      Submenu m_menuHelp {
        label {&Help} open
        xywh {0 0 100 20}
      } {
        MenuItem m_menuHelpAbout {
          label {&About}
          callback {string version = "eqsl version %s\\ncompiled %s %s";
fl_message(version.c_str(), VERSION_STR_PRINT, __DATE__, __TIME__);}
          xywh {0 0 100 20}
          code0 {\#include <FL/fl_ask.H>}
          code1 {\#include "version.h"}
        }
      }
    }
    Fl_Browser m_outputConsole {
      xywh {0 25 400 275}
      code0 {m_outputConsole->add(toolsHistoryTitle.c_str());}
    }
  }
} 
