PROJECT(aqsis_all)

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules" "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

INCLUDE(macros)

INCLUDE(FirstCMakeRun)
INCLUDE(OutOfSourceBuild)

INCLUDE(FindWin32Libs)
INCLUDE(FindTIFF)
INCLUDE(FindJPEG)
INCLUDE(FindBoost)
INCLUDE(FindZLIB)
INCLUDE(FindFLTK)
INCLUDE(FindOpenEXR)
INCLUDE(FindXsltproc)
INCLUDE(FindFlexBison)
INCLUDE(FindSVNVersion)

IF(NOT AQSIS_FLTK_FOUND)
	MESSAGE(STATUS "Cannot find FLTK, display and piqsl will not be built")
ENDIF(NOT AQSIS_FLTK_FOUND)
IF(NOT AQSIS_FLUID_FOUND)
	MESSAGE(STATUS "Cannot find Fluid, piqsl will not be built")
ENDIF(NOT AQSIS_FLUID_FOUND)

ENABLE_TESTING()

IF(WIN32)
	SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
ELSE(WIN32)
	SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
ENDIF(WIN32)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)

SET(MAJOR 1)
SET(MINOR 3)
SET(BUILD 0)
SVN_REPOSITORY_VERSION( REVISION ${PROJECT_SOURCE_DIR} )
CONFIGURE_FILE(version.h.in.cmake ${PROJECT_BINARY_DIR}/version.h)

INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR})

OPTION(AQSIS_USE_TIMERS "Enable performance timers ON/OFF" ON)
IF(AQSIS_USE_TIMERS)
	ADD_DEFINITIONS(-DUSE_TIMERS)
ENDIF(AQSIS_USE_TIMERS)

OPTION(AQSIS_USE_PLUGINS "Enable plugins (required for plugin display drivers) ON/OFF" ON)
IF(AQSIS_USE_PLUGINS)
	ADD_DEFINITIONS(-DPLUGINS)
ENDIF(AQSIS_USE_PLUGINS)

OPTION(AQSIS_ENABLE_TESTING "Enable unit testing ON/OFF" OFF)

IF(UNIX AND NOT APPLE)
	INCLUDE(${CMAKE_SOURCE_DIR}/cmake/platform/linux.cmake) 
ELSE(UNIX AND NOT APPLE)
	IF(WIN32)
		INCLUDE(${CMAKE_SOURCE_DIR}/cmake/platform/windows.cmake)
	ELSE(WIN32)
		IF(APPLE)
			INCLUDE(${CMAKE_SOURCE_DIR}/cmake/platform/macosx.cmake)
			INCLUDE(${CMAKE_SOURCE_DIR}/cmake/platform/macosx.cmake)
		ENDIF(APPLE)
	ENDIF(WIN32)
ENDIF(UNIX AND NOT APPLE)

SET(DEFAULT_PLUGIN_PATH "${CMAKE_INSTALL_PREFIX}/${PLUGINDIR}")
SET(DEFAULT_RC_PATH "${CMAKE_INSTALL_PREFIX}/${SYSCONFDIR}")

IF(WIN32)
	ADD_DEFINITIONS(-DNO_SYSLOG -D_USE_MATH_DEFINES)
ELSE(WIN32)
	ADD_DEFINITIONS(-DDEFAULT_PLUGIN_PATH="\\"${DEFAULT_PLUGIN_PATH}\\"")
	ADD_DEFINITIONS(-DDEFAULT_RC_PATH="\\"${DEFAULT_RC_PATH}\\"")
ENDIF(WIN32)

IF(FIRST_CMAKE_RUN)
	# Set default build type the first time cmake is run, but only if it's
	# empty (an alternative value might have been specified on the command
	# line, and we want this to override the default below.).
	SET_IF_EMPTY(CMAKE_BUILD_TYPE "Release" CACHE STRING
		"Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel."
		FORCE
		)
ENDIF(FIRST_CMAKE_RUN)

ADD_SUBDIRECTORY(argparse)
ADD_SUBDIRECTORY(rib/api)
ADD_SUBDIRECTORY(rib/rib2)
ADD_SUBDIRECTORY(rib/rib2ri)
ADD_SUBDIRECTORY(renderer/ddmanager)
ADD_SUBDIRECTORY(renderer/raytrace)
ADD_SUBDIRECTORY(shadercompiler/shaderexecenv)
ADD_SUBDIRECTORY(aqsistypes)
# Get the value of AQSISTYPES_LIBRARY from the aqsistypes project, so that downstream projects
# can use it.
GET_DIRECTORY_PROPERTY(AQSISTYPES_LIBRARY DIRECTORY aqsistypes DEFINITION AQSISTYPES_LIBRARY)
ADD_SUBDIRECTORY(shadercompiler/shadervm)
ADD_SUBDIRECTORY(renderer/render)
ADD_SUBDIRECTORY(renderer/aqsis)
ADD_SUBDIRECTORY(shadercompiler/slparse)
ADD_SUBDIRECTORY(shadercompiler/codegenvm)
ADD_SUBDIRECTORY(shadercompiler/aqsl)
# Get the value of AQSL_EXECUTABLE from the shadercompiler/aqsl project, so that downstream projects
# can use it.
GET_DIRECTORY_PROPERTY(AQSL_EXECUTABLE DIRECTORY shadercompiler/aqsl DEFINITION AQSL_EXECUTABLE)
ADD_SUBDIRECTORY(shadercompiler/slxargs)
ADD_SUBDIRECTORY(shadercompiler/aqsltell)
ADD_SUBDIRECTORY(rib/ri2rib)
ADD_SUBDIRECTORY(rib/miqser)
ADD_SUBDIRECTORY(texturing/teqser)
IF(AQSIS_FLTK_FOUND)
	ADD_SUBDIRECTORY(displays/display)
ENDIF(AQSIS_FLTK_FOUND)
ADD_SUBDIRECTORY(thirdparty/tinyxml)
ADD_SUBDIRECTORY(displays/d_exr)
ADD_SUBDIRECTORY(displays/d_sdcBMP)
ADD_SUBDIRECTORY(shaders)
IF(AQSIS_FLTK_FOUND AND AQSIS_FLUID_FOUND AND AQSIS_BOOST_FOUND)
	ADD_SUBDIRECTORY(displays/piqsl)
	GET_DIRECTORY_PROPERTY(piqsl_DISPLAYLIB DIRECTORY displays/piqsl DEFINITION DISPLAYLIB)
ENDIF(AQSIS_FLTK_FOUND AND AQSIS_FLUID_FOUND AND AQSIS_BOOST_FOUND)
#
# Build aqsisrc
#
IF(AQSIS_FLTK_FOUND)
	GET_DIRECTORY_PROPERTY(display_DISPLAYLIB DIRECTORY displays/display DEFINITION DISPLAYLIB)
ENDIF(AQSIS_FLTK_FOUND)
GET_DIRECTORY_PROPERTY(d_exr_DISPLAYLIB DIRECTORY displays/d_exr DEFINITION DISPLAYLIB)
GET_DIRECTORY_PROPERTY(d_bmp_DISPLAYLIB DIRECTORY displays/d_sdcBMP DEFINITION DISPLAYLIB)
SET(SHADERPATH ${CMAKE_INSTALL_PREFIX}/${SHADERDIR})
SET(ARCHIVEPATH ${CMAKE_INSTALL_PREFIX})
SET(TEXTUREPATH ${CMAKE_INSTALL_PREFIX})
SET(DISPLAYPATH ${CMAKE_INSTALL_PREFIX}/${DISPLAYSDIR})
SET(PROCEDURALPATH ${CMAKE_INSTALL_PREFIX})
SET(PLUGINPATH ${CMAKE_INSTALL_PREFIX})
SET(RESOURCEPATH ${CMAKE_INSTALL_PREFIX})
CONFIGURE_FILE(aqsisrc.in.cmake ${PROJECT_BINARY_DIR}/aqsisrc)
ADD_CUSTOM_TARGET(aqsisrc ALL echo
	DEPENDS  ${PROJECT_BINARY_DIR}/aqsisrc
	)
INSTALL(FILES ${PROJECT_BINARY_DIR}/aqsisrc DESTINATION ${SYSCONFDIR})

#
# Packaging setup
#
INCLUDE(InstallRequiredSystemLibraries)

SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Aqsis Renderer")
SET(CPACK_PACKAGE_VENDOR "Aqsis Team")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README")
#SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/COPYING")
SET(CPACK_PACKAGE_VERSION_MAJOR "${MAJOR}")
SET(CPACK_PACKAGE_VERSION_MINOR "${MINOR}")
SET(CPACK_PACKAGE_VERSION_PATCH "${BUILD}")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "Aqsis-${MAJOR}.${MINOR}")
INCLUDE(CPack)
