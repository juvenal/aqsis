// Aqsis
// Copyright (C) 1997 - 2007, Paul C. Gregory
//
// Contact: pgregory@aqsis.org
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

/** \file
 *
 * \brief Sampling quadrilateral struct definition
 *
 * \author Chris Foster [ chris42f (at) gmail (dot) com ]
 */

#ifndef SAMPLEQUAD_H_INCLUDED
#define SAMPLEQUAD_H_INCLUDED

#include "vector2d.h"

namespace Aqsis {

/** \brief 2D quadrilateral over which to sample a texture
 *
 * The vertices of the quad have the ordering such that v4 corresponds to the
 * diagonally opposite corner of the quad from v1.  This is the same way that
 * texture coordinates are interpreted in the RiTextureCoordinates() interface
 * call.  As a picture:
 *
 * \verbatim
 *
 *   v1---v2
 *   |     |
 *   |     |
 *   v3---v4
 *
 * \endverbatim
 */
struct SqSampleQuad
{
	CqVector2D v1;
	CqVector2D v2;
	CqVector2D v3;
	CqVector2D v4;

	/// Construct from explicit texture coordinates
	inline SqSampleQuad(TqFloat s1, TqFloat t1, TqFloat s2, TqFloat t2,
			TqFloat s3, TqFloat t3, TqFloat s4, TqFloat t4);
	inline SqSampleQuad(CqVector2D v1, CqVector2D v2, CqVector2D v3, CqVector2D v4);
};


/** \brief Clamp the aspect ratio of a sampling quadrilateral.
 *
 * When doing anisotropic filtering, it's possible to get extremely anisotropic
 * cases where the filter area is essentially unbounded.  We need to ensure
 * this never happens.  Consider a quadrialteral:
 *
 * \verbatim
 *
 *       ------------------------- s1 ------------------------->
 *                                                              
 *    |  v1---------------------------------------------------v2
 * s2 |  |                                                     |
 *    v  v3---------------------------------------------------v4
 *
 * \endverbatim
 *
 * Define the avearaged side vectors,
 *   s1 = 1/2 (v2-v1 + v4-v3), and
 *   s2 = 1/2 (v3-v1 + v4-v2).
 *
 * The approach taken here is to check that the length of s1 is never greater
 * than "maxAspectRatio" times the length of s2.  If it is, then the length of
 * s2 is increased by expanding the quadrilateral along the direction s2.  This
 * choice ensures that the adjustment never leads to aliasing.  However, it may
 * sometimes lead to blurring... one of these is unavoidable.
 *
 * (The code also does a similar check for the diagonals, d1 = v4-v1 and
 * d2 = v2-v3, since by itself the check on s1 and s2 is not enough.)
 * 
 * \param quad - sampling quad to clamp
 * \param maxAspectRatio - maximum allowable aspect ratio for the quad.
 *
 * \return The smallest length scale of the quadrilateral - either the length
 * of a short side, or 
 */
//inline void clampAspectRatio(SqSampleQuad& quad, const TqFloat maxAspectRatio);


//==============================================================================
// Implementation details
//==============================================================================

inline SqSampleQuad::SqSampleQuad(TqFloat s1, TqFloat t1, TqFloat s2, TqFloat t2,
		TqFloat s3, TqFloat t3, TqFloat s4, TqFloat t4)
	: v1(s1, t1),
	v2(s2, t2),
	v3(s3, t3),
	v4(s4, t4)
{ }

inline SqSampleQuad::SqSampleQuad(CqVector2D v1, CqVector2D v2,
		CqVector2D v3, CqVector2D v4)
	: v1(v1),
	v2(v2),
	v3(v3),
	v4(v4)
{ }


#if 0
inline TqFloat clampAspectRatio(SqSampleQuad& quad, const TqFloat maxAspectRatio)
{
	CqVector2D d1 = quad.v4-quad.v1;
	CqVector2D d2 = quad.v2-quad.v3;
	CqVector2D s1 = 0.5*(d1+d2);
	CqVector2D s2 = 0.5*(d1-d2);

	TqFloat s1Len2 = s1.Magnitude2();
	TqFloat s2Len2 = s2.Magnitude2();
	const TqFloat maxAspectRatio2 = maxAspectRatio*maxAspectRatio;
	// Check whether side lengths have the required aspect ratio.
	if(s1Len2 > maxAspectRatio2*s2Len2)
	{
		// Rotate s1 by 90 degrees clockwise to get the expansion direction -
		// should be more numerically stable than relying on the direction of
		// s2.  expandVec should be roughly parallel to s2.
		CqVector2D expandVec(s1.y(), -s1.x());
		expandVec *= (1/maxAspectRatio);
		quad.v1 += 
	}
	else if(s2Len2 > maxAspectRatio2*s1Len2)
	{
	}
	else
	{
		// Note: leaving out this second set of checks on the quadrilateral
		// diagonals is a possible optimization. but decreases the robustness
		// of the code.  Sample points generated by splitting prims into grids
		// are probably unlikely to cause this particular "diamond-shaped"
		// sample region.
		TqFloat d1Len2 = d1.Magnitude2();
		TqFloat d2Len2 = d2.Magnitude2();
		if(d1Len2 > maxAspectRatio2*d2Len2)
		{
		}
		else if(d2Len2 > maxAspectRatio2*d1Len2)
		{
		}
	}
}
#endif

} // namespace Aqsis

#endif // SAMPLEQUAD_H_INCLUDED
