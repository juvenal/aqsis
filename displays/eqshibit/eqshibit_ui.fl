# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
header_name {fluid_eqshibit_ui.h} 
code_name {fluid_eqshibit_ui.cpp}
class CqEqshibitMainWindow {open : {public Aqsis::CqEqshibitBase}
} {
  Function {CqEqshibitMainWindow()} {open
  } {
    Fl_Window m_window {open
      private xywh {513 174 540 310} type Double resizable
      code0 {\#include "eqshibit.h"}
      code1 {\#include "eqshibitbase.h"}
      code2 {\#include <stdio.h>}
      code3 {\#include "bookbrowser.h"} visible
    } {
      Fl_Menu_Bar {} {open
        xywh {0 0 685 25} box THIN_UP_BOX
        code0 {\#include <FL/Fl_Sys_Menu_Bar.H>}
        class Fl_Sys_Menu_Bar
      } {
        Submenu {} {
          label {&File} open
          xywh {0 0 100 20}
        } {
          MenuItem m_menuFileOpen {
            label {&Open}
            private xywh {0 0 100 20} shortcut 0x4006f
            code0 {o->shortcut(FL_COMMAND+'o');}
          }
          MenuItem m_menuFileSave {
            label {&Save}
            private xywh {0 0 100 20} shortcut 0x40073
            code0 {o->shortcut(FL_COMMAND+'s');}
          }
          MenuItem m_menuFileSaveAs {
            label {Save &As}
            callback {saveConfigurationAs();}
            private xywh {0 0 100 20} shortcut 0x50073 divider
            code0 {o->shortcut(FL_COMMAND+'S');}
          }
          MenuItem m_menuFileQuit {
            label {&Quit}
            private xywh {0 0 100 20} shortcut 0x40071
            code0 {o->shortcut(FL_COMMAND+'q');}
          }
        }
        Submenu {} {
          label {&Book} open
          xywh {5 5 100 20}
        } {
          MenuItem m_menuBookNew {
            label {&New}
            callback {addNewBook("Book1");}
            private xywh {5 5 100 20} shortcut 0x4006e
            code0 {o->shortcut(FL_COMMAND+'n');}
          }
          MenuItem m_menuBookExport {
            label {&Export}
            private xywh {5 5 100 20} shortcut 0x40065
            code0 {o->shortcut(FL_COMMAND+'e');}
          }
          MenuItem m_menuBookImport {
            label {&Import}
            private xywh {5 5 100 20} shortcut 0x40069 divider
            code0 {o->shortcut(FL_COMMAND+'i');}
          }
          MenuItem {} {
            label {&Rename}
            xywh {0 0 100 20} shortcut 0x40072
            code0 {o->shortcut(FL_COMMAND+'r');}
          }
        }
        Submenu {} {
          label {&Help} open
          xywh {5 5 63 20}
        } {
          MenuItem {} {
            label About
            private xywh {5 5 31 20}
          }
        }
      }
      Fl_Tabs m_tabBooks {
        callback {Aqsis::CqBookBrowser* browser = static_cast<Aqsis::CqBookBrowser*>(o->value());
setCurrentBook(browser->book());} open
        private xywh {0 29 540 281}
      } {}
      Fl_Menu_Button {} {open
        xywh {0 30 540 280} labeltype NO_LABEL resizable
        code0 {o->type(Fl_Menu_Button::POPUP3);}
      } {
        MenuItem {} {
          label Cut
          xywh {0 0 100 20} shortcut 0x40078
          code0 {o->shortcut(FL_COMMAND+'x');}
        }
        MenuItem {} {
          label Copy
          xywh {0 0 100 20} shortcut 0x40063
          code0 {o->shortcut(FL_COMMAND+'c');}
        }
        MenuItem {} {
          label Paste
          xywh {0 0 100 20} shortcut 0x40076
          code0 {o->shortcut(FL_COMMAND+'v');}
        }
      }
    }
  }
  Function {addNewBook(std::string name)} {open return_type {virtual boost::shared_ptr<Aqsis::CqBook>}
  } {
    code {Fl::lock();
boost::shared_ptr<Aqsis::CqBook> newBook(CqEqshibitBase::addNewBook(name));
char* _name = new char[name.length()+1];
strcpy(_name, name.c_str());
Aqsis::CqBookBrowser *o = new Aqsis::CqBookBrowser(0, 50, m_tabBooks->w(), m_tabBooks->h(), _name);
o->setBook(newBook);
m_columnWidths[0] = 200;
m_columnWidths[1] = 0;
o->column_widths(m_columnWidths);
o->type(FL_MULTI_BROWSER);
o->callback(&CqEqshibitMainWindow::select_cb, this);
o->showcolsep(1);
m_tabBooks->add(o);
m_tabBooks->value(o);
m_tabBooks->resizable(o);
m_tabBooks->init_sizes();
m_tabBooks->redraw();
Fl::awake();
Fl::unlock();
return(newBook);} {}
  }
  Function {show(int argc, char **argv)} {open
  } {
    code {m_window->show(argc, argv);} {}
  }
  Function {addImageToCurrentBook(boost::shared_ptr<Aqsis::CqImage>& image)} {open return_type {virtual TqUlong}
  } {
    code {Fl::lock();
TqUlong id = CqEqshibitBase::addImageToCurrentBook(image);
Fl_Widget* current = m_tabBooks->value();
Aqsis::CqBookBrowser* bcurr = static_cast<Aqsis::CqBookBrowser*>(current);
// Note: in the FLTK gui, the image indices are 1 based, but inside the CqBook
// they are zero based, this is because the (void*) stuff passed around in 
// FLTK for the Fl_Browser_ class uses 0 to indicate false.
bcurr->setCurrentSelected(id + 1);
bcurr->redraw();
Fl::awake();
Fl::unlock();
return( id );} {}
  }
  Function {select_cb(Fl_Widget* w, void* d)} {open return_type {static void}
  } {
    code {Fl::lock();
Aqsis::CqBookBrowser* browser = static_cast<Aqsis::CqBookBrowser*>(w);
int theEvent = Fl::event();
if(theEvent == FL_RELEASE)
{
	CqEqshibitMainWindow* win = reinterpret_cast<CqEqshibitMainWindow*>(d);
	if(win && w && win->currentBook())
	{
		std::vector<boost::shared_ptr<Aqsis::CqImage> >::size_type selected = 
			browser->currentSelected();
		boost::shared_ptr<Aqsis::CqImage> image = win->currentBook()->image(selected-1);
		if(image && win->currentBook()->framebuffer())
		{
			win->currentBook()->framebuffer()->connect(image);
			win->currentBook()->framebuffer()->update(-1,-1,-1,-1);
			if(Fl::event_clicks())
				win->currentBook()->framebuffer()->show();
		}
	}
}
Fl::awake();
Fl::unlock();} {selected
    }
  }
  Function {updateImageList()} {open return_type {virtual void}
  } {
    code {Fl::lock();
Aqsis::CqBookBrowser* bookBrowser = static_cast<Aqsis::CqBookBrowser*>(m_tabBooks->value());

if(0 != bookBrowser)
{	
//	int line;
//	for(line = 2 /* Skip the title */; line <= bookBrowser->size(); line++)
//	{
//		TqUlong imageID = reinterpret_cast<TqUlong>(bookBrowser->data(line));
//		boost::shared_ptr<Aqsis::CqImage> image = bookBrowser->book()->image(imageID);
//		std::stringstream item;
//		item << image->name() << "\\t" << image->frameWidth() << "x" << image->frameHeight();
//		bookBrowser->text(line, item.str().c_str());
//	}
	bookBrowser->redraw();
}
Fl::awake();
Fl::unlock();} {}
  }
  decl {int m_columnWidths[2];} {}
} 
