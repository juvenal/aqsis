# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
header_name {fluid_eqshibit_ui.h} 
code_name {fluid_eqshibit_ui.cpp}
class CqEqshibitMainWindow {open : {public Aqsis::CqEqshibitBase}
} {
  Function {CqEqshibitMainWindow()} {open
  } {
    Fl_Window m_window {open
      private xywh {422 221 540 310} type Double resizable
      code0 {\#include "eqshibit.h"}
      code1 {\#include "eqshibitbase.h"}
      code2 {\#include <stdio.h>}
      code3 {\#include "resizebrowser.h"} visible
    } {
      Fl_Menu_Bar {} {open
        xywh {0 0 685 25} box THIN_UP_BOX
        code0 {\#include <FL/Fl_Sys_Menu_Bar.H>}
        class Fl_Sys_Menu_Bar
      } {
        Submenu {} {
          label {&File} open
          xywh {0 0 100 20}
        } {
          MenuItem m_menuBookNew {
            label {&New}
            callback {addNewBook("Book1");}
            private xywh {0 0 100 20}
            code0 {o->shortcut(FL_COMMAND+'n');}
          }
          MenuItem m_menuBookOpen {
            label {&Open}
            private xywh {0 0 100 20}
            code0 {o->shortcut(FL_COMMAND+'o');}
          }
          MenuItem m_menuBookSave {
            label {&Save}
            private xywh {0 0 100 20}
            code0 {o->shortcut(FL_COMMAND+'s');}
          }
        }
      }
      Fl_Tabs m_tabBooks {open
        private xywh {0 29 540 281} resizable
      } {}
    }
  }
  Function {addNewBook(std::string name)} {open return_type {virtual void}
  } {
    code {Fl::lock();
CqEqshibitBase::addNewBook(name);
char* _name = new char[name.length()+1];
strcpy(_name, name.c_str());
Fl_Resize_Browser *o = new Fl_Resize_Browser(0, 50, m_tabBooks->w(), m_tabBooks->h(), _name);
m_columnWidths[0] = 200;
m_columnWidths[1] = 0;
o->column_widths(m_columnWidths);
o->column_char('\\t');
o->type(FL_MULTI_BROWSER);
o->callback(&CqEqshibitMainWindow::select_cb, this);
o->add("@b@B28@C7Name\\t@b@B28@C7Resolution");
o->showcolsep(1);
m_tabBooks->add(o);
m_tabBooks->resizable(o);
m_tabBooks->init_sizes();
m_tabBooks->redraw();
Fl::awake();
Fl::unlock();} {selected
    }
  }
  Function {show(int argc, char **argv)} {open
  } {
    code {m_window->show(argc, argv);} {}
  }
  Function {addImageToCurrentBook(boost::shared_ptr<Aqsis::CqImage>& image)} {open return_type {virtual TqUlong}
  } {
    code {Fl::lock();
TqUlong id = CqEqshibitBase::addImageToCurrentBook(image);
// Should update book list here to match the base, but for
// now we'll just add the name to the browser.
Fl_Widget* current = m_tabBooks->value();
Fl_Resize_Browser* bcurr = static_cast<Fl_Resize_Browser*>(current);
std::stringstream item;
item << image->name() << "\\t" << image->frameWidth() << "x" << image->frameHeight();
bcurr->add(item.str().c_str(), (void*)id);
bcurr->redraw();
//Fl::check();
Fl::awake();
Fl::unlock();
return( id );} {}
  }
  Function {select_cb(Fl_Widget* w, void* d)} {open return_type {static void}
  } {
    code {Fl::lock();
Fl_Resize_Browser* browser = static_cast<Fl_Resize_Browser*>(w);
CqEqshibitMainWindow* win = reinterpret_cast<CqEqshibitMainWindow*>(d);
if(win && w && win->currentBook())
{
	int selected = browser->value();
	TqUlong imageID = (TqUlong)browser->data(selected);
	boost::shared_ptr<Aqsis::CqImage> image = win->currentBook()->image(imageID);
	if(image && win->currentBook()->framebuffer())
	{
		win->currentBook()->framebuffer()->connect(image);
		win->currentBook()->framebuffer()->update(-1,-1,-1,-1);
	}
}
Fl::awake();
Fl::unlock();} {}
  }
  Function {updateImageList(const std::string& bookName)} {open return_type {virtual void}
  } {
    code {Fl::lock();
Fl_Widget* const* tabs = m_tabBooks->array();
Fl_Resize_Browser* bookBrowser = 0;

int tabIndex = 0;
for(tabIndex = 0; tabIndex < m_tabBooks->children(); tabIndex++)
{
	if(std::string(tabs[tabIndex]->label()) == bookName)
		bookBrowser = static_cast<Fl_Resize_Browser*>(tabs[tabIndex]);
}

if(0 != bookBrowser)
{	
	int line;
	for(line = 2 /* Skip the title */; line <= bookBrowser->size(); line++)
	{
		TqUlong imageID = reinterpret_cast<TqUlong>(bookBrowser->data(line));
		boost::shared_ptr<Aqsis::CqImage> image = book(bookName)->image(imageID);
		std::stringstream item;
		item << image->name() << "\\t" << image->frameWidth() << "x" << image->frameHeight();
		bookBrowser->text(line, item.str().c_str());
	}
	bookBrowser->redraw();
}
Fl::awake();
Fl::unlock();} {}
  }
  decl {int m_columnWidths[2];} {}
} 
