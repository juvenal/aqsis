# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
header_name {.h} 
code_name {.cpp}
class CqEqshibitMainWindow {open : {public Aqsis::CqEqshibitBase}
} {
  Function {CqEqshibitMainWindow()} {open
  } {
    Fl_Window m_window {open
      private xywh {388 207 685 485} type Double resizable
      code0 {\#include "eqshibit.h"}
      code1 {\#include "eqshibitbase.h"}
      code2 {\#include <stdio.h>}
      code3 {\#include <FL/Fl_Multi_Browser.H>} visible
    } {
      Fl_Menu_Bar {} {open
        xywh {0 0 685 25}
      } {
        Submenu {} {
          label Book open
          xywh {0 0 100 20}
        } {
          MenuItem m_menuBookNew {
            label New
            callback {addNewBook("Book1");}
            private xywh {0 0 100 20} shortcut 0x4006e
          }
          MenuItem m_menuBookOpen {
            label Open
            private xywh {0 0 100 20} shortcut 0x4006f
          }
          MenuItem m_menuBookSave {
            label Save
            private xywh {0 0 100 20} shortcut 0x40073
          }
        }
      }
      Fl_Tabs m_tabBooks {open
        private xywh {0 25 685 460} resizable
      } {}
    }
  }
  Function {addNewBook(std::string name)} {open return_type {virtual void}
  } {
    code {CqEqshibitBase::addNewBook(name);
Fl_Multi_Browser *o = new Fl_Multi_Browser(0, 50, 685, 435, name.c_str());
o->callback(&CqEqshibitMainWindow::select_cb, this);
m_tabBooks->add(o);
m_tabBooks->resizable(o);
m_tabBooks->init_sizes();
m_tabBooks->redraw();} {}
  }
  Function {show(int argc, char **argv)} {open
  } {
    code {m_window->show(argc, argv);} {}
  }
  Function {addImageToCurrentBook(boost::shared_ptr<Aqsis::CqImage>& image)} {open return_type {virtual TqUlong}
  } {
    code {TqUlong id = CqEqshibitBase::addImageToCurrentBook(image);
// Should update book list here to match the base, but for
// now we'll just add the name to the browser.
Fl_Widget* current = m_tabBooks->value();
Fl_Multi_Browser* bcurr = static_cast<Fl_Multi_Browser*>(current);
bcurr->add(image->name().c_str(), (void*)id);
return( id );} {}
  }
  Function {select_cb(Fl_Widget* w, void* d)} {open return_type {static void}
  } {
    code {Fl_Multi_Browser* browser = static_cast<Fl_Multi_Browser*>(w);
CqEqshibitMainWindow* win = reinterpret_cast<CqEqshibitMainWindow*>(d);
if(win && w)
{
	int selected = browser->value();
	TqUlong imageID = (TqUlong)browser->data(selected);
	boost::shared_ptr<Aqsis::CqImage> image = win->currentBook()->image(imageID);
	if(image)
	{
		win->currentBook()->framebuffer()->connect(image);
		win->currentBook()->framebuffer()->update(-1,-1,-1,-1);
	}
}} {}
  }
  Function {updateImageList(const std::string& bookName)} {open return_type {virtual void}
  } {
    code {Fl_Widget* const* tabs = m_tabBooks->array();
Fl_Multi_Browser* bookBrowser = 0;

int tabIndex = 0;
for(tabIndex = 0; tabIndex < m_tabBooks->children(); tabIndex++)
{
	if(std::string(tabs[tabIndex]->label()) == bookName)
		bookBrowser = static_cast<Fl_Multi_Browser*>(tabs[tabIndex]);
}

if(0 != bookBrowser)
{	
	int line;
	for(line = 1; line <= bookBrowser->size(); line++)
	{
		TqUlong imageID = reinterpret_cast<TqUlong>(bookBrowser->data(line));
		boost::shared_ptr<Aqsis::CqImage> image = book(bookName)->image(imageID);
		bookBrowser->text(line, image->name().c_str());
	}
	bookBrowser->redraw();
}} {selected
    }
  }
} 
