import re

Import('env')

aqsl_sources = Split("""
	aqslcomp.cpp""")

aqslenv = env.Copy()

# Set any platform specific options for this target
aqslenv.UseTargetOptions('aqsl')

aqsl = aqslenv.Program('aqsl', aqsl_sources, LIBS=['argparse', 'codegenvm', 'slpp', 'aqsistypes', 'slparse'])
aqslenv.Install('$BINDIR', aqsl)

# This emitter will be used later by a Builder, and has an explcit dependency on the mk_vds tool
def aqsl_emitter(target, source, env):
    env.Depends(target, aqsl)
    return (target, source)

# Create a builder (that uses the emitter) to build .slx files from .sl files
# The use of abspath is so that aqsl's directory doesn't have to be added to the shell path.
bld = Builder(action = '"' + aqsl[0].abspath + '"' + ' -o $TARGET $SOURCE',
              emitter = aqsl_emitter,
              suffix = '.slx', src_suffix = '.sl')

# Add the new Builder to the list of builders
env['BUILDERS']['Shader'] = bld

      
# Create a scanner for .sl files
include_re = re.compile(r'^#include\s+"(\S+)"$', re.M)

def slfile_scan(node, env, path):
	contents = node.get_contents()
	result = include_re.findall(contents)
	return result
    
slscan = Scanner(function = slfile_scan,
	skeys = ['.sl'])
env.Append(SCANNERS = slscan)

env.Distribute('shadercompiler/aqsl', aqsl_sources)
env.Distribute('shadercompiler/aqsl', "SConscript")

