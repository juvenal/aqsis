############################################################################
# This file specifies the tasks to do.
#
# There are the following tasks available:
#
# - JobOverview(renderer, jobs=AllJobs)
#
#   Renders each job and creates an overview page listing the RIB name
#   and a thumbnail.
#
#   renderer: The renderer instance which should be used to create the 
#             thumbnails.
#   jobs:     A list of jobs or "AllJobs".
#
# - RegressionTest(renderer, reference, jobs=AllJobs, cmp_threshold=0,
#                  create_references=False)
#
#   Renders each job and compares the output image with a reference image.
#
#   renderer:  The renderer instance which should be used to create the tests.
#   reference: The directory that contains the reference images.
#   jobs:      A list of jobs or "AllJobs".
#   cmp_threshold: The threshold used for comparisons (0=pics must match 
#              exactly)
#   create_references: If True the task will render the jobs and copy
#              the results into the reference directory. No regression test
#              is done.
#
# - CompareRenderers(renderers, jobs=AllJobs)
#
#   Renders the jobs using several renderers and creates a page showing
#   the resulting images and the render times.
#
#   renderers: A list of renderer instances.
#   jobs:      A list of jobs or "AllJobs".
#
# - SpeedComparison(renderers, jobs=AllJobs)
#
#   Renders the jobs using several renderers and creates a page showing
#   the render times.
#
#   renderers: A list of renderer instances.
#   jobs:      A list of jobs or "AllJobs".
#
# - RiCalls(jobs=AllJobs)
#
#   Creates a list of Ri calls and the jobs that test each call.
#
#   jobs:      A list of jobs or "AllJobs".
#
#
# This file is executed as Python code so you can actually use any valid
# Python construct. "JobOverview", "RegressionTest" and "CompareRenderers"
# are the names of a classes, so you can also assign the result to a variable 
# for later use (e.g. as a target or to define a list of tasks).
#
# The jobs can be specified either by providing the job instance or
# the name of the rib, so you could either write 
#
#   jobs = [job1, job2, job3]   
#
# where in your jobs config file you have definitions like
#
# job1 = RenderJob("test_suite", "sphere.rib")
# ...
#
# or you could write
#
#   jobs = ["sphere.rib", "cone.rib", "torus.rib"]
#
# 
# If you assign the tasks to variables you can use those as targets when
# calling rendertester.py. You can also group several tasks in a list
# and use the list name as target. If the rendertester is called without
# any target then all listed tasks are executed.
############################################################################


# Directory with reference images (used for all renderers)
ref_dir = "reference"
#ref_dir = "private_reference"


overview = JobOverview( renderer = aqsis,
                        jobs = AllJobs )

rt_aqsis = RegressionTest( renderer  = aqsis,
                           jobs      = AllJobs,
                           reference = ref_dir,
                           cmp_threshold = 2)

rt_pixie = RegressionTest( renderer  = pixie,
                           jobs      = AllJobs,
                           reference = ref_dir,
                           cmp_threshold = 2)

rt_bmrt = RegressionTest( renderer  = bmrt,
                          jobs      = AllJobs,
                          reference = ref_dir,
                          cmp_threshold = 2)

rt_3delight = RegressionTest( renderer  = delight,
                              jobs      = AllJobs,
                              reference = ref_dir,
                              cmp_threshold = 2)

cmp = CompareRenderers( renderers = [aqsis,bmrt,pixie,delight],
                        jobs = AllJobs )

speed = SpeedComparison( renderers = [aqsis,bmrt,pixie,delight],
                         jobs = AllJobs )

ricalls = RiCalls( jobs = AllJobs )


include_cfg("custom_tasks.cfg")
