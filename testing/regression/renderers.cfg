############################################################################
# The file contains the available renderer.
#
# Renderer(shortname, renderer, shadercompiler, 
#          rversionopt=None, scversionopt=None,
#          environ=[])
#
# shortname:      Identifying name (will be used as part of filenames).
#                 Each renderer must have a unique shortname!
# renderer:       Renderer command.
# shadercompiler: Shading language compiler.
# rversionopt:    Option string that has to be specified to get the version.
# scversionopt:   Same as above but for the SL compiler.
# environ:        Sequence of tuples (env. variable, value).
#
# This file is executed as Python code so you can actually use any valid
# Python construct. "Renderer" is the name of a class, so you can also
# assign the result to a variable for later use (e.g. in your tasks config
# file).
############################################################################

aqsis = Renderer("Aqsis", "aqsis --nocolor", "aqsl", "--version", "--version")

bmrt  = Renderer("BMRT", "rendrib", "slc", "-h", "-h")

pixie = Renderer("Pixie", "rndr", "sdrc", None, "-v")

delight = Renderer("3Delight", "renderdl", "shaderdl", "-v", "-v")

prman = Renderer("prman", "prman", "shader", "-version", "-version")


# Development version of Aqsis (cvs version)...

# Change this path to the "renderer" directory of the Aqsis cvs tree
devpath = os.path.normpath("d:/Aqsis/renderer")

aqsis_cvs = Renderer("Aqsis_cvs", "aqsis", "aqsl", "--version", "--version",
            environ=[("PATH", os.path.join(devpath,"bin;")+os.environ["PATH"]),
                     ("AQSIS_BASE_PATH", os.path.join(devpath,"bin")),
                     ("AQSIS_SHADERS_PATH", os.path.join(devpath, "shaders")),
                     ("AQSIS_DISPLAYS_PATH", os.path.join(devpath, "bin"))
                     ])

include_cfg("custom_renderers.cfg")
