######################################################################
# Render jobs
######################################################################


RenderJob("", "coneparams1.py", ["../../shaders/show_st.sl"],
          description="""
          Tests the parameters <em>height</em> and <em>thetamax</em> of
          RiCone() by displaying a 5x5 matrix of cones.
          Height increases from left to right (-2, -1, 0, 1, 2) and thetamax
          takes the following values from top to bottom: 360, 220, 60, -60, 0.
          The local coordinate system of each cone is such that X is
          pointing to the left, Y is pointing away from the viewer and
          Z is up. The cones are displayed using the show_st shader.<br>
          <b>Note:</b> The middle column (height=0) should display a
          flat disk and not nothing at all, only the bottom row should be
          empty.
          """
)

RenderJob("", "sphereparams1.py", ["../../shaders/show_st.sl"],
          description="""
          Tests the parameters <em>zmin</em>, <em>zmax</em> and <em>thetamax</em> of
          RiSphere() by displaying a 5x5 matrix of spheres.
          Zmin and zmax go from -1 to 1 on alternate rows and thetamax
          takes the following values from top to bottom: 360, 220, 60, -60, 0.
          The local coordinate system of each cone is such that X is
          pointing to the left, Y is pointing away from the viewer and
          Z is up. The spheres are displayed using the show_st shader.<br>
          """
)

RenderJob("", "torusparams1.py", ["../../shaders/show_st.sl"],
          description="""
          Tests the parameters <em>phimin</em>, <em>phimax</em> and <em>thetamax</em> of
          RiTorus() by displaying a 5x5 matrix of tori.
          On alternate rows, phimin/phimax go from 0 to 360 with the other value
          fixed at 180, and thetamax
          takes the following values from top to bottom: 360, 220, 60, -60, 0.
          The local coordinate system of each cone is such that X is
          pointing to the left, Y is pointing away from the viewer and
          Z is up. The tori are displayed using the show_st shader.<br>
          """
)

RenderJob("", "simplenurbs.rib",
          description="""
          A simple NURBS patch using a matte shader and three point lights.
          """)

RenderJob("", "simplecylinder.rib",
          description="""
          A simple cylinder (RiCylinder) using a matte shader and three point lights.
          """)

RenderJob("", "simplecone.rib",
          description="""
          A simple cone (RiCone) using a matte shader and three point lights.
          """)

RenderJob("", "simplesphere.rib",
          description="""
          A simple green sphere (RiSphere) using a matte shader.
          """)

RenderJob("", "quads_test.rib",
          description="""
          A scene containing all quadrics (Sphere, Cone, Cylinder, Hyperboloid,
          Paraboloid, Torus, Disk) using a matte shader.
          """)

RenderJob("", "colpervertex_test.rib",
          description="""
          This scene contains a couple of primitives whose color is set
          on a per-vertex basis. <br>
          The primitives on the upper row (from left to right):
          Bilinear patch, bicubic patch, periodic bicubic patch mesh,
          nonperiodic bicubic patch mesh.<br>
          The primitives on the lower row (from left to right):
          Disc (constant colored), PointsPolygon, Polygon.
          """)

RenderJob("", "trim_test.rib",
          description="""
	  Tests is the renderer supports trimmed NURBS. The scene contains
	  one rectangular NURBS patch that has a circular trim curve
	  applied to it. The image should actually show an orange disc.
          """)

RenderJob("", "teapotgeom.rib", shaders=["../../shaders/show_st.sl"], 
          description="""
          This scene tests the builtin "teapot" geometry which is
          displayed using the show_st shader.
          """)

RenderJob("", "periodic_test.rib",
          description="""
          Tests the uwrap/vwrap parameters of a PatchMesh.
          The top row shows two bilinear patch meshes, the bottom row
          two bicubic meshes. Each pair is identical in shape but
          is defined differently. The meshes on the left are periodic
          in v direction whereas the meshes on the right are periodic
          in u direction. (The vertices are the same in each pair,
          but the ordering differs so that the resulting shape is the
          same)
          """)
